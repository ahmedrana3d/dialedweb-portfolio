/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { Suspense, useEffect, useRef, useState } from 'react'
import { useGLTF, useTexture, useVideoTexture } from '@react-three/drei'
import { useControls } from 'leva'
import { BackSide } from 'three'
export default function MonitorBox(props) {
  const { nodes, materials } = useGLTF('models/Monitor.glb')


const [monitorPos, setMonitorPos] = useState([-37.3600,-32.1700,0])
  useEffect(() => {
    const handleResize = () => {
      // Adjust xPosition based on screen size
      const screenWidth = window.innerWidth;
      if (screenWidth < 1000) {
        setMonitorPos([0,-60,0])
      } else {
     setMonitorPos([67.9900,0,0])
      }

    };

    handleResize(); // Call it once to set initial position

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);


  return (
    <group {...props} dispose={null} position={monitorPos} scale={[0.35 , 0.35 , 0.35]}>
         <mesh
        castShadow
        receiveShadow
        geometry={nodes.Monitor.geometry}
        material={materials.lambert3SG}
      />
      <mesh
        castShadow
        receiveShadow
        rotation={[-Math.PI, 0.001, -0.006]}
        position={[1.25, 12, -170.662]}
        geometry={nodes.Monitor001.geometry}>
               <Suspense fallback={null}>
        <VideoMaterial url="./audios/boxmonitor_video.mp4" />
      </Suspense>
        </mesh>
    </group>
  )
}

useGLTF.preload('models/Monitor.glb')


function VideoMaterial({ url }) {
  const texture = useVideoTexture(url);
texture.flipY = true

  return <meshBasicMaterial map={texture} side={BackSide} toneMapped={false} />;
}

// Monitor : -50.00 PosY